// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-62TPEV2
// DateTime: 5/31/2024 4:29:31 PM
// UserName: Elijah
// Input file <TCCL.grammar.y - 5/31/2024 2:13:35 PM>

// options: no-lines diagnose & report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace ASTBuilder
{
internal enum Token {error=2,EOF=3,AND=4,ASTERISK=5,BANG=6,
    BOOLEAN=7,CLASS=8,COLON=9,COMMA=10,ELSE=11,EQUALS=12,
    HAT=13,IDENTIFIER=14,IF=15,INSTANCEOF=16,INT=17,INT_NUMBER=18,
    LBRACE=19,LBRACKET=20,LPAREN=21,MINUSOP=22,NEW=23,NULL=24,
    OP_EQ=25,OP_GE=26,OP_GT=27,OP_LAND=28,OP_LE=29,OP_LOR=30,
    OP_LT=31,OP_NE=32,PERCENT=33,PERIOD=34,PIPE=35,PLUSOP=36,
    PRIVATE=37,PUBLIC=38,QUESTION=39,RBRACE=40,RBRACKET=41,RETURN=42,
    RPAREN=43,RSLASH=44,SEMICOLON=45,STATIC=46,STRING_LITERAL=47,SUPER=48,
    STRUCT=49,THIS=50,TILDE=51,VOID=52,WHILE=53,STRING=54,
    UNARY=55};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<AbstractNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public AbstractNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, AbstractNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class TCCLParser: ShiftReduceParser<AbstractNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[108];
  private static State[] states = new State[171];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "ClassDeclaration", "Modifiers", "ClassBody", 
      "MemberDeclarations", "MemberDeclaration", "FieldDeclaration", "MethodDeclaration", 
      "ConstructorDeclaration", "StaticInitializer", "StructDeclaration", "TypeSpecifier", 
      "MethodSignature", "MethodBody", "ParameterList", "Parameter", "Block", 
      "FieldNames", "TypeName", "ArraySpecifier", "PrimitiveType", "QualifiedName", 
      "NameList", "LocalItems", "LocalItem", "LocalVariableDeclaration", "Statement", 
      "LocalVariableNames", "EmptyStatement", "ExpressionStatement", "SelectionStatement", 
      "IterationStatement", "ReturnStatement", "Expression", "ArgumentList", 
      "ArithmeticUnaryOperator", "PrimaryExpression", "NotJustName", "SpecialName", 
      "ComplexPrimary", "ComplexPrimaryNoParenthesis", "Number", "FieldAccess", 
      "MethodCall", "MethodReference", };

  static TCCLParser() {
    states[0] = new State(new int[]{38,117,37,118,46,119},new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{8,5,38,114,37,115,46,116});
    states[5] = new State(new int[]{14,6});
    states[6] = new State(new int[]{19,8},new int[]{-5,7});
    states[7] = new State(-3);
    states[8] = new State(new int[]{40,169,38,117,37,118,46,163},new int[]{-6,9,-7,170,-8,12,-4,14,-9,165,-10,166,-11,167,-12,168});
    states[9] = new State(new int[]{40,10,38,117,37,118,46,163},new int[]{-7,11,-8,12,-4,14,-9,165,-10,166,-11,167,-12,168});
    states[10] = new State(-10);
    states[11] = new State(-13);
    states[12] = new State(new int[]{45,13});
    states[13] = new State(-14);
    states[14] = new State(new int[]{38,114,37,115,46,116,49,111,7,36,17,37,52,38,54,39,14,162},new int[]{-13,15,-14,160,-20,32,-22,35,-23,157,-21,108});
    states[15] = new State(new int[]{14,149},new int[]{-19,16,-14,17,-24,148});
    states[16] = new State(-27);
    states[17] = new State(new int[]{19,20},new int[]{-15,18,-18,19});
    states[18] = new State(-19);
    states[19] = new State(-25);
    states[20] = new State(new int[]{40,146,7,36,17,37,52,38,54,39,14,78,38,117,37,118,46,119,45,122,36,81,22,82,50,88,24,89,21,91,47,95,18,97,15,127,53,135,42,141,19,20},new int[]{-25,21,-26,147,-27,24,-13,25,-20,32,-22,35,-23,40,-21,108,-12,109,-4,110,-28,120,-30,121,-31,123,-35,124,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100,-32,126,-33,134,-34,140,-18,145});
    states[21] = new State(new int[]{40,22,7,36,17,37,52,38,54,39,14,78,38,117,37,118,46,119,45,122,36,81,22,82,50,88,24,89,21,91,47,95,18,97,15,127,53,135,42,141,19,20},new int[]{-26,23,-27,24,-13,25,-20,32,-22,35,-23,40,-21,108,-12,109,-4,110,-28,120,-30,121,-31,123,-35,124,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100,-32,126,-33,134,-34,140,-18,145});
    states[22] = new State(-42);
    states[23] = new State(-45);
    states[24] = new State(-46);
    states[25] = new State(new int[]{14,31},new int[]{-29,26,-24,28});
    states[26] = new State(new int[]{45,27});
    states[27] = new State(-48);
    states[28] = new State(new int[]{10,29,45,-50});
    states[29] = new State(new int[]{14,30});
    states[30] = new State(-39);
    states[31] = new State(-38);
    states[32] = new State(new int[]{20,33,14,-28});
    states[33] = new State(new int[]{41,34});
    states[34] = new State(-32);
    states[35] = new State(-30);
    states[36] = new State(-33);
    states[37] = new State(-34);
    states[38] = new State(-35);
    states[39] = new State(-36);
    states[40] = new State(new int[]{34,41,12,43,20,-31,14,-31,45,-87,30,-87,28,-87,35,-87,13,-87,4,-87,25,-87,32,-87,27,-87,31,-87,29,-87,26,-87,36,-87,22,-87,5,-87,44,-87,33,-87,21,-101});
    states[41] = new State(new int[]{14,42});
    states[42] = new State(-104);
    states[43] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,44,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[44] = new State(new int[]{30,45,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,45,-66,43,-66,10,-66});
    states[45] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,46,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[46] = new State(new int[]{30,-67,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,45,-67,43,-67,10,-67});
    states[47] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,48,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[48] = new State(new int[]{30,-68,28,-68,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,45,-68,43,-68,10,-68});
    states[49] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,50,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[50] = new State(new int[]{30,-69,28,-69,35,-69,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,45,-69,43,-69,10,-69});
    states[51] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,52,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[52] = new State(new int[]{30,-70,28,-70,35,-70,13,-70,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,45,-70,43,-70,10,-70});
    states[53] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,54,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[54] = new State(new int[]{30,-71,28,-71,35,-71,13,-71,4,-71,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,45,-71,43,-71,10,-71});
    states[55] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,56,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[56] = new State(new int[]{30,-72,28,-72,35,-72,13,-72,4,-72,25,-72,32,-72,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,45,-72,43,-72,10,-72});
    states[57] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,58,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[58] = new State(new int[]{30,-73,28,-73,35,-73,13,-73,4,-73,25,-73,32,-73,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,45,-73,43,-73,10,-73});
    states[59] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,60,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[60] = new State(new int[]{30,-74,28,-74,35,-74,13,-74,4,-74,25,-74,32,-74,27,-74,31,-74,29,-74,26,-74,36,67,22,69,5,71,44,73,33,75,45,-74,43,-74,10,-74});
    states[61] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,62,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[62] = new State(new int[]{30,-75,28,-75,35,-75,13,-75,4,-75,25,-75,32,-75,27,-75,31,-75,29,-75,26,-75,36,67,22,69,5,71,44,73,33,75,45,-75,43,-75,10,-75});
    states[63] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,64,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[64] = new State(new int[]{30,-76,28,-76,35,-76,13,-76,4,-76,25,-76,32,-76,27,-76,31,-76,29,-76,26,-76,36,67,22,69,5,71,44,73,33,75,45,-76,43,-76,10,-76});
    states[65] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,66,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[66] = new State(new int[]{30,-77,28,-77,35,-77,13,-77,4,-77,25,-77,32,-77,27,-77,31,-77,29,-77,26,-77,36,67,22,69,5,71,44,73,33,75,45,-77,43,-77,10,-77});
    states[67] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,68,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[68] = new State(new int[]{30,-78,28,-78,35,-78,13,-78,4,-78,25,-78,32,-78,27,-78,31,-78,29,-78,26,-78,36,-78,22,-78,5,71,44,73,33,75,45,-78,43,-78,10,-78});
    states[69] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,70,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[70] = new State(new int[]{30,-79,28,-79,35,-79,13,-79,4,-79,25,-79,32,-79,27,-79,31,-79,29,-79,26,-79,36,-79,22,-79,5,71,44,73,33,75,45,-79,43,-79,10,-79});
    states[71] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,72,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[72] = new State(-80);
    states[73] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,74,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[74] = new State(-81);
    states[75] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,76,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[76] = new State(-82);
    states[77] = new State(new int[]{12,43,34,41,30,-87,28,-87,35,-87,13,-87,4,-87,25,-87,32,-87,27,-87,31,-87,29,-87,26,-87,36,-87,22,-87,5,-87,44,-87,33,-87,45,-87,43,-87,10,-87,21,-101});
    states[78] = new State(-103);
    states[79] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,80,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[80] = new State(-83);
    states[81] = new State(-85);
    states[82] = new State(-86);
    states[83] = new State(-84);
    states[84] = new State(new int[]{34,85,45,-88,30,-88,28,-88,35,-88,13,-88,4,-88,25,-88,32,-88,27,-88,31,-88,29,-88,26,-88,36,-88,22,-88,5,-88,44,-88,33,-88,43,-88,10,-88});
    states[85] = new State(new int[]{14,86});
    states[86] = new State(-97);
    states[87] = new State(new int[]{34,-89,45,-89,30,-89,28,-89,35,-89,13,-89,4,-89,25,-89,32,-89,27,-89,31,-89,29,-89,26,-89,36,-89,22,-89,5,-89,44,-89,33,-89,43,-89,10,-89,21,-102});
    states[88] = new State(-105);
    states[89] = new State(-106);
    states[90] = new State(-90);
    states[91] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,92,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[92] = new State(new int[]{43,93,30,45,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75});
    states[93] = new State(-91);
    states[94] = new State(new int[]{34,-92,45,-92,30,-92,28,-92,35,-92,13,-92,4,-92,25,-92,32,-92,27,-92,31,-92,29,-92,26,-92,36,-92,22,-92,5,-92,44,-92,33,-92,43,-92,10,-92,21,-100});
    states[95] = new State(-93);
    states[96] = new State(-94);
    states[97] = new State(-107);
    states[98] = new State(-95);
    states[99] = new State(-96);
    states[100] = new State(new int[]{21,101});
    states[101] = new State(new int[]{43,106,14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-36,102,-35,107,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[102] = new State(new int[]{43,103,10,104});
    states[103] = new State(-98);
    states[104] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,105,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[105] = new State(new int[]{30,45,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,43,-65,10,-65});
    states[106] = new State(-99);
    states[107] = new State(new int[]{30,45,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75,43,-64,10,-64});
    states[108] = new State(-29);
    states[109] = new State(-49);
    states[110] = new State(new int[]{49,111,38,114,37,115,46,116});
    states[111] = new State(new int[]{14,112});
    states[112] = new State(new int[]{19,8},new int[]{-5,113});
    states[113] = new State(-26);
    states[114] = new State(-7);
    states[115] = new State(-8);
    states[116] = new State(-9);
    states[117] = new State(-4);
    states[118] = new State(-5);
    states[119] = new State(-6);
    states[120] = new State(-47);
    states[121] = new State(-51);
    states[122] = new State(-57);
    states[123] = new State(-52);
    states[124] = new State(new int[]{45,125,30,45,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75});
    states[125] = new State(-58);
    states[126] = new State(-53);
    states[127] = new State(new int[]{21,128});
    states[128] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,129,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[129] = new State(new int[]{43,130,30,45,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75});
    states[130] = new State(new int[]{45,122,14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97,15,127,53,135,42,141,19,20},new int[]{-28,131,-30,121,-31,123,-35,124,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100,-32,126,-33,134,-34,140,-18,145});
    states[131] = new State(new int[]{11,132,40,-60,7,-60,17,-60,52,-60,54,-60,14,-60,38,-60,37,-60,46,-60,45,-60,36,-60,22,-60,50,-60,24,-60,21,-60,47,-60,18,-60,15,-60,53,-60,42,-60,19,-60});
    states[132] = new State(new int[]{45,122,14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97,15,127,53,135,42,141,19,20},new int[]{-28,133,-30,121,-31,123,-35,124,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100,-32,126,-33,134,-34,140,-18,145});
    states[133] = new State(-59);
    states[134] = new State(-54);
    states[135] = new State(new int[]{21,136});
    states[136] = new State(new int[]{14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,137,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[137] = new State(new int[]{43,138,30,45,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75});
    states[138] = new State(new int[]{45,122,14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97,15,127,53,135,42,141,19,20},new int[]{-28,139,-30,121,-31,123,-35,124,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100,-32,126,-33,134,-34,140,-18,145});
    states[139] = new State(-61);
    states[140] = new State(-55);
    states[141] = new State(new int[]{45,144,14,78,36,81,22,82,50,88,24,89,21,91,47,95,18,97},new int[]{-35,142,-23,77,-37,79,-38,83,-39,84,-40,87,-41,90,-42,94,-43,96,-44,98,-45,99,-46,100});
    states[142] = new State(new int[]{45,143,30,45,28,47,35,49,13,51,4,53,25,55,32,57,27,59,31,61,29,63,26,65,36,67,22,69,5,71,44,73,33,75});
    states[143] = new State(-62);
    states[144] = new State(-63);
    states[145] = new State(-56);
    states[146] = new State(-43);
    states[147] = new State(-44);
    states[148] = new State(new int[]{10,29,45,-37});
    states[149] = new State(new int[]{21,150,10,-38,45,-38});
    states[150] = new State(new int[]{43,158,7,36,17,37,52,38,54,39,14,78},new int[]{-16,151,-17,159,-13,155,-20,32,-22,35,-23,157,-21,108});
    states[151] = new State(new int[]{43,152,10,153});
    states[152] = new State(-20);
    states[153] = new State(new int[]{7,36,17,37,52,38,54,39,14,78},new int[]{-17,154,-13,155,-20,32,-22,35,-23,157,-21,108});
    states[154] = new State(-23);
    states[155] = new State(new int[]{14,156});
    states[156] = new State(-24);
    states[157] = new State(new int[]{34,41,20,-31,14,-31});
    states[158] = new State(-21);
    states[159] = new State(-22);
    states[160] = new State(new int[]{19,20},new int[]{-18,161});
    states[161] = new State(-40);
    states[162] = new State(new int[]{21,150,34,-103,20,-103,14,-103});
    states[163] = new State(new int[]{19,20,38,-6,37,-6,46,-6,49,-6,7,-6,17,-6,52,-6,54,-6,14,-6},new int[]{-18,164});
    states[164] = new State(-41);
    states[165] = new State(-15);
    states[166] = new State(-16);
    states[167] = new State(-17);
    states[168] = new State(-18);
    states[169] = new State(-11);
    states[170] = new State(-12);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4,8,14,-5});
    rules[4] = new Rule(-4, new int[]{38});
    rules[5] = new Rule(-4, new int[]{37});
    rules[6] = new Rule(-4, new int[]{46});
    rules[7] = new Rule(-4, new int[]{-4,38});
    rules[8] = new Rule(-4, new int[]{-4,37});
    rules[9] = new Rule(-4, new int[]{-4,46});
    rules[10] = new Rule(-5, new int[]{19,-6,40});
    rules[11] = new Rule(-5, new int[]{19,40});
    rules[12] = new Rule(-6, new int[]{-7});
    rules[13] = new Rule(-6, new int[]{-6,-7});
    rules[14] = new Rule(-7, new int[]{-8,45});
    rules[15] = new Rule(-7, new int[]{-9});
    rules[16] = new Rule(-7, new int[]{-10});
    rules[17] = new Rule(-7, new int[]{-11});
    rules[18] = new Rule(-7, new int[]{-12});
    rules[19] = new Rule(-9, new int[]{-4,-13,-14,-15});
    rules[20] = new Rule(-14, new int[]{14,21,-16,43});
    rules[21] = new Rule(-14, new int[]{14,21,43});
    rules[22] = new Rule(-16, new int[]{-17});
    rules[23] = new Rule(-16, new int[]{-16,10,-17});
    rules[24] = new Rule(-17, new int[]{-13,14});
    rules[25] = new Rule(-15, new int[]{-18});
    rules[26] = new Rule(-12, new int[]{-4,49,14,-5});
    rules[27] = new Rule(-8, new int[]{-4,-13,-19});
    rules[28] = new Rule(-13, new int[]{-20});
    rules[29] = new Rule(-13, new int[]{-21});
    rules[30] = new Rule(-20, new int[]{-22});
    rules[31] = new Rule(-20, new int[]{-23});
    rules[32] = new Rule(-21, new int[]{-20,20,41});
    rules[33] = new Rule(-22, new int[]{7});
    rules[34] = new Rule(-22, new int[]{17});
    rules[35] = new Rule(-22, new int[]{52});
    rules[36] = new Rule(-22, new int[]{54});
    rules[37] = new Rule(-19, new int[]{-24});
    rules[38] = new Rule(-24, new int[]{14});
    rules[39] = new Rule(-24, new int[]{-24,10,14});
    rules[40] = new Rule(-10, new int[]{-4,-14,-18});
    rules[41] = new Rule(-11, new int[]{46,-18});
    rules[42] = new Rule(-18, new int[]{19,-25,40});
    rules[43] = new Rule(-18, new int[]{19,40});
    rules[44] = new Rule(-25, new int[]{-26});
    rules[45] = new Rule(-25, new int[]{-25,-26});
    rules[46] = new Rule(-26, new int[]{-27});
    rules[47] = new Rule(-26, new int[]{-28});
    rules[48] = new Rule(-27, new int[]{-13,-29,45});
    rules[49] = new Rule(-27, new int[]{-12});
    rules[50] = new Rule(-29, new int[]{-24});
    rules[51] = new Rule(-28, new int[]{-30});
    rules[52] = new Rule(-28, new int[]{-31});
    rules[53] = new Rule(-28, new int[]{-32});
    rules[54] = new Rule(-28, new int[]{-33});
    rules[55] = new Rule(-28, new int[]{-34});
    rules[56] = new Rule(-28, new int[]{-18});
    rules[57] = new Rule(-30, new int[]{45});
    rules[58] = new Rule(-31, new int[]{-35,45});
    rules[59] = new Rule(-32, new int[]{15,21,-35,43,-28,11,-28});
    rules[60] = new Rule(-32, new int[]{15,21,-35,43,-28});
    rules[61] = new Rule(-33, new int[]{53,21,-35,43,-28});
    rules[62] = new Rule(-34, new int[]{42,-35,45});
    rules[63] = new Rule(-34, new int[]{42,45});
    rules[64] = new Rule(-36, new int[]{-35});
    rules[65] = new Rule(-36, new int[]{-36,10,-35});
    rules[66] = new Rule(-35, new int[]{-23,12,-35});
    rules[67] = new Rule(-35, new int[]{-35,30,-35});
    rules[68] = new Rule(-35, new int[]{-35,28,-35});
    rules[69] = new Rule(-35, new int[]{-35,35,-35});
    rules[70] = new Rule(-35, new int[]{-35,13,-35});
    rules[71] = new Rule(-35, new int[]{-35,4,-35});
    rules[72] = new Rule(-35, new int[]{-35,25,-35});
    rules[73] = new Rule(-35, new int[]{-35,32,-35});
    rules[74] = new Rule(-35, new int[]{-35,27,-35});
    rules[75] = new Rule(-35, new int[]{-35,31,-35});
    rules[76] = new Rule(-35, new int[]{-35,29,-35});
    rules[77] = new Rule(-35, new int[]{-35,26,-35});
    rules[78] = new Rule(-35, new int[]{-35,36,-35});
    rules[79] = new Rule(-35, new int[]{-35,22,-35});
    rules[80] = new Rule(-35, new int[]{-35,5,-35});
    rules[81] = new Rule(-35, new int[]{-35,44,-35});
    rules[82] = new Rule(-35, new int[]{-35,33,-35});
    rules[83] = new Rule(-35, new int[]{-37,-35});
    rules[84] = new Rule(-35, new int[]{-38});
    rules[85] = new Rule(-37, new int[]{36});
    rules[86] = new Rule(-37, new int[]{22});
    rules[87] = new Rule(-38, new int[]{-23});
    rules[88] = new Rule(-38, new int[]{-39});
    rules[89] = new Rule(-39, new int[]{-40});
    rules[90] = new Rule(-39, new int[]{-41});
    rules[91] = new Rule(-41, new int[]{21,-35,43});
    rules[92] = new Rule(-41, new int[]{-42});
    rules[93] = new Rule(-42, new int[]{47});
    rules[94] = new Rule(-42, new int[]{-43});
    rules[95] = new Rule(-42, new int[]{-44});
    rules[96] = new Rule(-42, new int[]{-45});
    rules[97] = new Rule(-44, new int[]{-39,34,14});
    rules[98] = new Rule(-45, new int[]{-46,21,-36,43});
    rules[99] = new Rule(-45, new int[]{-46,21,43});
    rules[100] = new Rule(-46, new int[]{-42});
    rules[101] = new Rule(-46, new int[]{-23});
    rules[102] = new Rule(-46, new int[]{-40});
    rules[103] = new Rule(-23, new int[]{14});
    rules[104] = new Rule(-23, new int[]{-23,34,14});
    rules[105] = new Rule(-40, new int[]{50});
    rules[106] = new Rule(-40, new int[]{24});
    rules[107] = new Rule(-43, new int[]{18});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> ClassDeclaration
{ CurrentSemanticValue = new CompilationUnit(ValueStack[ValueStack.Depth-1]);}
        break;
      case 3: // ClassDeclaration -> Modifiers, CLASS, IDENTIFIER, ClassBody
{ CurrentSemanticValue = new ClassDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]);}
        break;
      case 4: // Modifiers -> PUBLIC
{ CurrentSemanticValue = new Modifiers(ModifierType.PUBLIC);}
        break;
      case 5: // Modifiers -> PRIVATE
{ CurrentSemanticValue = new Modifiers(ModifierType.PRIVATE);}
        break;
      case 6: // Modifiers -> STATIC
{ CurrentSemanticValue = new Modifiers(ModifierType.STATIC);}
        break;
      case 7: // Modifiers -> Modifiers, PUBLIC
{ ValueStack[ValueStack.Depth-2].makeSibling(new Modifiers(ModifierType.PUBLIC)); }
        break;
      case 8: // Modifiers -> Modifiers, PRIVATE
{ ValueStack[ValueStack.Depth-2].makeSibling(new Modifiers(ModifierType.PRIVATE)); }
        break;
      case 9: // Modifiers -> Modifiers, STATIC
{ ValueStack[ValueStack.Depth-2].makeSibling(new Modifiers(ModifierType.STATIC)); }
        break;
      case 10: // ClassBody -> LBRACE, MemberDeclarations, RBRACE
{ CurrentSemanticValue = new ClassBody(ValueStack[ValueStack.Depth-2]);}
        break;
      case 11: // ClassBody -> LBRACE, RBRACE
{ CurrentSemanticValue = new Identifier("Not Implemented: empty Class Body");}
        break;
      case 12: // MemberDeclarations -> MemberDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 13: // MemberDeclarations -> MemberDeclarations, MemberDeclaration
{ ValueStack[ValueStack.Depth-2].makeSibling(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 14: // MemberDeclaration -> FieldDeclaration, SEMICOLON
{ CurrentSemanticValue = new Identifier("Not Implemented: FieldDeclaration");}
        break;
      case 15: // MemberDeclaration -> MethodDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 19: // MethodDeclaration -> Modifiers, TypeSpecifier, MethodSignature, MethodBody
{CurrentSemanticValue = new MethodDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 20: // MethodSignature -> IDENTIFIER, LPAREN, ParameterList, RPAREN
{ CurrentSemanticValue = new MethodSignature(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 21: // MethodSignature -> IDENTIFIER, LPAREN, RPAREN
{ CurrentSemanticValue = new MethodSignature(ValueStack[ValueStack.Depth-3]); }
        break;
      case 22: // ParameterList -> Parameter
{ CurrentSemanticValue = new ParameterList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 23: // ParameterList -> ParameterList, COMMA, Parameter
{ ValueStack[ValueStack.Depth-3].adoptChildren(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 24: // Parameter -> TypeSpecifier, IDENTIFIER
{ CurrentSemanticValue = new Parameter(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 25: // MethodBody -> Block
{ CurrentSemanticValue = new Block(ValueStack[ValueStack.Depth-1]); }
        break;
      case 26: // StructDeclaration -> Modifiers, STRUCT, IDENTIFIER, ClassBody
{ CurrentSemanticValue = new Struct(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]);}
        break;
      case 27: // FieldDeclaration -> Modifiers, TypeSpecifier, FieldNames
{ }
        break;
      case 28: // TypeSpecifier -> TypeName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 30: // TypeName -> PrimitiveType
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 33: // PrimitiveType -> BOOLEAN
{ CurrentSemanticValue = new PrimitiveType(EnumPrimitiveType.BOOLEAN); }
        break;
      case 34: // PrimitiveType -> INT
{ CurrentSemanticValue = new PrimitiveType(EnumPrimitiveType.INT); }
        break;
      case 35: // PrimitiveType -> VOID
{ CurrentSemanticValue = new PrimitiveType(EnumPrimitiveType.VOID); }
        break;
      case 36: // PrimitiveType -> STRING
{ CurrentSemanticValue = new PrimitiveType(EnumPrimitiveType.STRING); }
        break;
      case 39: // NameList -> NameList, COMMA, IDENTIFIER
{ ValueStack[ValueStack.Depth-3].makeSibling(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];}
        break;
      case 42: // Block -> LBRACE, LocalItems, RBRACE
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 43: // Block -> LBRACE, RBRACE
{ CurrentSemanticValue =  new Identifier("Not Implemented: Empty Block"); }
        break;
      case 44: // LocalItems -> LocalItem
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 45: // LocalItems -> LocalItems, LocalItem
{ ValueStack[ValueStack.Depth-2].makeSibling(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 47: // LocalItem -> Statement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 48: // LocalVariableDeclaration -> TypeSpecifier, LocalVariableNames, SEMICOLON
{ CurrentSemanticValue = new LocalDecl(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 56: // Statement -> Block
{ CurrentSemanticValue = new Block(ValueStack[ValueStack.Depth-1]); }
        break;
      case 58: // ExpressionStatement -> Expression, SEMICOLON
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 59: // SelectionStatement -> IF, LPAREN, Expression, RPAREN, Statement, ELSE, 
               //                       Statement
{ CurrentSemanticValue = new SelectionStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], SelectionType.IF_ELSE); }
        break;
      case 60: // SelectionStatement -> IF, LPAREN, Expression, RPAREN, Statement
{ CurrentSemanticValue = new SelectionStatement(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], SelectionType.IF); }
        break;
      case 61: // IterationStatement -> WHILE, LPAREN, Expression, RPAREN, Statement
{ CurrentSemanticValue = new IterationStatement(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], IterationType.WHILE); }
        break;
      case 62: // ReturnStatement -> RETURN, Expression, SEMICOLON
{ CurrentSemanticValue = new ReturnStatement(ValueStack[ValueStack.Depth-2]); }
        break;
      case 65: // ArgumentList -> ArgumentList, COMMA, Expression
{ ValueStack[ValueStack.Depth-3].makeSibling(ValueStack[ValueStack.Depth-1]); }
        break;
      case 66: // Expression -> QualifiedName, EQUALS, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.EQUALS, ValueStack[ValueStack.Depth-1]); }
        break;
      case 67: // Expression -> Expression, OP_LOR, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.OP_LOR, ValueStack[ValueStack.Depth-1]); }
        break;
      case 68: // Expression -> Expression, OP_LAND, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.OP_LAND, ValueStack[ValueStack.Depth-1]); }
        break;
      case 69: // Expression -> Expression, PIPE, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.PIPE, ValueStack[ValueStack.Depth-1]); }
        break;
      case 70: // Expression -> Expression, HAT, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.HAT, ValueStack[ValueStack.Depth-1]); }
        break;
      case 71: // Expression -> Expression, AND, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.AND, ValueStack[ValueStack.Depth-1]); }
        break;
      case 72: // Expression -> Expression, OP_EQ, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.OP_EQ, ValueStack[ValueStack.Depth-1]); }
        break;
      case 73: // Expression -> Expression, OP_NE, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.OP_NE, ValueStack[ValueStack.Depth-1]); }
        break;
      case 74: // Expression -> Expression, OP_GT, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.OP_GT, ValueStack[ValueStack.Depth-1]); }
        break;
      case 75: // Expression -> Expression, OP_LT, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.OP_LT, ValueStack[ValueStack.Depth-1]); }
        break;
      case 76: // Expression -> Expression, OP_LE, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.OP_LE, ValueStack[ValueStack.Depth-1]); }
        break;
      case 77: // Expression -> Expression, OP_GE, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.OP_GE, ValueStack[ValueStack.Depth-1]); }
        break;
      case 78: // Expression -> Expression, PLUSOP, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.PLUSOP, ValueStack[ValueStack.Depth-1]); }
        break;
      case 79: // Expression -> Expression, MINUSOP, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.MINUSOP, ValueStack[ValueStack.Depth-1]); }
        break;
      case 80: // Expression -> Expression, ASTERISK, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.ASTERISK, ValueStack[ValueStack.Depth-1]); }
        break;
      case 81: // Expression -> Expression, RSLASH, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExprKind.RSLASH, ValueStack[ValueStack.Depth-1]); }
        break;
      case 84: // Expression -> PrimaryExpression
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 87: // PrimaryExpression -> QualifiedName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 88: // PrimaryExpression -> NotJustName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 89: // NotJustName -> SpecialName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 90: // NotJustName -> ComplexPrimary
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 91: // ComplexPrimary -> LPAREN, Expression, RPAREN
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 92: // ComplexPrimary -> ComplexPrimaryNoParenthesis
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 93: // ComplexPrimaryNoParenthesis -> STRING_LITERAL
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 94: // ComplexPrimaryNoParenthesis -> Number
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 95: // ComplexPrimaryNoParenthesis -> FieldAccess
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 96: // ComplexPrimaryNoParenthesis -> MethodCall
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 97: // FieldAccess -> NotJustName, PERIOD, IDENTIFIER
{ CurrentSemanticValue = new Identifier("Not Implemented: FieldAccess");}
        break;
      case 98: // MethodCall -> MethodReference, LPAREN, ArgumentList, RPAREN
{ CurrentSemanticValue =  new MethodCall(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 99: // MethodCall -> MethodReference, LPAREN, RPAREN
{ CurrentSemanticValue = new MethodCall(ValueStack[ValueStack.Depth-3]);}
        break;
      case 100: // MethodReference -> ComplexPrimaryNoParenthesis
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 101: // MethodReference -> QualifiedName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 102: // MethodReference -> SpecialName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
        break;
      case 104: // QualifiedName -> QualifiedName, PERIOD, IDENTIFIER
{ ValueStack[ValueStack.Depth-3].adoptChildren(ValueStack[ValueStack.Depth-1]); }
        break;
      case 107: // Number -> INT_NUMBER
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
